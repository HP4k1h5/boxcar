~ test increment box

Given (a box):
  ```
  ┏━┓
  ┃a┃
  ┗━┛
  ```

Execute (put cursor in box and inc):
  call cursor(3,4)
  call boxcar#resize#box(0, 1, 0)

Expect (a wider box):
  ```
  ┏━━┓
  ┃a ┃
  ┗━━┛
  ```

Given (a box and newlines):
  ```
  
  ┏━┓
  ┃b┃
  ┃ ┃
  ┗━┛

  ```

Execute (put cursor below b and inc):
  call cursor(5,4)
  call boxcar#resize#box(3, 0, 0)

Expect (a taller box and preserved space):
  ```
  
  ┏━┓
  ┃b┃
  ┃ ┃
  ┃ ┃
  ┃ ┃
  ┃ ┃
  ┗━┛

  ```

Execute (put curosr on b and increment):
  call cursor(4,4)
  call boxcar#resize#box(3, 0, 0)

Expect (a taller box and b to be moved down):
  ```
  
  ┏━┓
  ┃ ┃
  ┃ ┃
  ┃ ┃
  ┃b┃
  ┃ ┃
  ┗━┛

  ```

Execute (put curosr on b and increment):
  call cursor(4,4)
  call boxcar#resize#box(3, 0, 0)

==================================================

Given (a box to the right):
  ```
  
        ┏━━┓
        ┃c ┃
        ┗━━┛
  ```

Execute (put cursor in box and inc):
  call cursor(4,11)
  call boxcar#resize#box(1, 1, 0)

Expect (an even bigger box in the right place):
  ```
  
        ┏━━━┓
        ┃   ┃
        ┃c  ┃
        ┗━━━┛
  ```


=============================
Given (a bigger box):
  ```
      ┏━━┓
      ┃  ┃
      ┃l ┃
      ┗━━┛
  ```

Execute (put cursor in box and inc by more than 1):
  call cursor(4,8)
  call boxcar#resize#box(1, 9, 0)

Expect (an even bigger box in the right place):
  ```
      ┏━━━━━━━━━━━┓
      ┃           ┃
      ┃l          ┃
      ┃           ┃
      ┗━━━━━━━━━━━┛
  ```



=============================
Given (a bigger box):
  ```
  
      ┏━━━━━━━━━┓
      ┃ abc     ┃
      ┃      xyw┃
      ┗━━━━━━━━━┛
  
  ```

Execute (put cursor in box and inc y and x by more than 1):
  call cursor(5,16)
  call boxcar#resize#box(2, 9, 0)
  AssertEqual getpos('.'), [0,6,16,0]

Expect (an even bigger box in the right place):
  ```
  
      ┏━━━━━━━━━━━━━━━━━━┓
      ┃ abc              ┃
      ┃                  ┃
      ┃      xyw         ┃
      ┗━━━━━━━━━━━━━━━━━━┛
  
  ```
